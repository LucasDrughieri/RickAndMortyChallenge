using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Web.Dtos;
using Web.Interfaces;

namespace Web.Clients
{
    /// <summary>
    /// Client to getting all locations
    /// </summary>
    public class LocationClient : BaseClient, ILocationClient
    {
        public LocationClient(HttpClient client) : base(client)
        {
        }

        public async Task<List<LocationResultResponse>> GetLocationsAsync(string url)
        {
            var result = new List<LocationResultResponse>();

            //Calling the first page of locations
            var locationResponse = await CallGetApiAsync<LocationResponse>(url);

            result.AddRange(locationResponse.Results);

            if (string.IsNullOrWhiteSpace(locationResponse.Info.Next)) return result;

            var pageUrl = locationResponse.Info.Next;

            //Using a Parallel.For to call all location pages
            var runner = Task.Run(() => Parallel.For(2, locationResponse.Info.Pages+1, (index) =>
            {
                var newUrl = pageUrl.Replace("page=2", $"page={index}");

                var locationPageResponse = CallGetApiAsync<LocationResponse>(newUrl).Result;

                lock (_lock)
                {
                    result.AddRange(locationPageResponse.Results);
                }
            }));

            //Waiting until all opened threads, generated by Parallel.For, will closed
            runner.Wait();

            return result;
        }
    }
}
